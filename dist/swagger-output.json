{
    "swagger": "2.0",
    "info": {
        "title": "Bishopric Tools API",
        "description": "The Bishopric Tools API is a RESTful API that allows users to interact with a database containing information about ward and stake members and calling propositions. It provides endpoints for creating, retrieving, updating, and deleting wards, stakes, members, and propositions.",
        "version": "1.0.0"
    },
    "host": "bishopric-tools.onrender.com",
    "basePath": "/",
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "oAuthSample": {
            "type": "oauth2",
            "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
            "tokenUrl": "https://www.googleapis.com/oauth2/v4/token",
            "flow": "implicit",
            "scopes": {
                "https://www.googleapis.com/auth/userinfo.profile": "All user operations requiring authentication."
            }
        }
    },
    "paths": {
        "/calling": {
            "get": {
                "summary": "This endpoint returns a list of all the callings in the database.",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns an array of calling objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Calling"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "This endpoint creates a calling.",
                "description": "",
                "parameters": [
                    {
                        "name": "newCalling",
                        "in": "body",
                        "description": "An object representing a new calling",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Calling"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns an object containing the result of the request and a string representing a MongoDB ObjectId.",
                        "schema": {
                            "$ref": "#/definitions/Calling"
                        }
                    },
                    "422": {
                        "description": "The provided calling object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/calling/{callingId}": {
            "get": {
                "summary": "This endpoint returns the details of a single calling.",
                "description": "",
                "parameters": [
                    {
                        "name": "callingId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a calling object.",
                        "schema": {
                            "$ref": "#/definitions/Calling"
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "This endpoint updates the content of a single calling.",
                "description": "",
                "parameters": [
                    {
                        "name": "callingId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "calling",
                        "in": "body",
                        "description": "An updated calling object",
                        "schema": {
                            "$ref": "#/definitions/Calling"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified calling has been edited."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "422": {
                        "description": "The provided calling object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "This endpoint deletes a single calling.",
                "description": "",
                "parameters": [
                    {
                        "name": "callingId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified calling has been deleted."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/member": {
            "get": {
                "summary": "This endpoint returns a list of all the members in the database.",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns an array of member objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Member"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "This endpoint creates a member.",
                "description": "",
                "parameters": [
                    {
                        "name": "newMember",
                        "in": "body",
                        "description": "An object representing a new member",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns an object containing the result of the request and a string representing a MongoDB ObjectId.",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "422": {
                        "description": "The provided member object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/member/{memberId}": {
            "get": {
                "summary": "This endpoint returns the details of a single member.",
                "description": "",
                "parameters": [
                    {
                        "name": "memberId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a member object.",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "This endpoint updates the content of a single member.",
                "description": "",
                "parameters": [
                    {
                        "name": "memberId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "member",
                        "in": "body",
                        "description": "An updated member object",
                        "schema": {
                            "$ref": "#/definitions/Member"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified member has been edited."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "422": {
                        "description": "The provided member object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "This endpoint deletes a single member.",
                "description": "",
                "parameters": [
                    {
                        "name": "memberId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified member has been deleted."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/member/ward/{wardId}": {
            "get": {
                "summary": "This endpoint returns all members for a given ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of member objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Member"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/member/stake/{stakeId}": {
            "get": {
                "summary": "This endpoint returns all members for a given stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "stakeId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of member objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Member"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition": {
            "get": {
                "summary": "This endpoint returns a list of all the propositions in the database.",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns an array of proposition objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposition"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "This endpoint creates a proposition.",
                "description": "",
                "parameters": [
                    {
                        "name": "newProposition",
                        "in": "body",
                        "description": "An object representing a new proposition",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "string",
                                    "example": "Jhon Doe"
                                },
                                "authorId": {
                                    "type": "string",
                                    "example": "6465a918462368509b563b23"
                                },
                                "tags": {
                                    "type": "array",
                                    "example": [
                                        "Technology",
                                        "Innovation",
                                        "Programming"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "replyTo": {
                                    "type": "string",
                                    "example": "6465abf6462368509b563b30"
                                }
                            },
                            "required": [
                                "content",
                                "authorId"
                            ]
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns an object containing the result of the request and a string representing a MongoDB ObjectId.",
                        "schema": {
                            "$ref": "#/definitions/Proposition"
                        }
                    },
                    "422": {
                        "description": "The provided proposition object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition/{propositionId}": {
            "get": {
                "summary": "This endpoint returns the details of a single proposition.",
                "description": "",
                "parameters": [
                    {
                        "name": "propositionId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a proposition object.",
                        "schema": {
                            "$ref": "#/definitions/Proposition"
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "This endpoint updates the content of a single proposition.",
                "description": "",
                "parameters": [
                    {
                        "name": "propositionId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "proposition",
                        "in": "body",
                        "description": "An updated proposition object",
                        "schema": {
                            "$ref": "#/definitions/Proposition"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified proposition has been edited."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "422": {
                        "description": "The provided proposition object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "This endpoint deletes a single proposition.",
                "description": "",
                "parameters": [
                    {
                        "name": "propositionId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified proposition has been deleted."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition/ward/{wardId}": {
            "get": {
                "summary": "This endpoint returns all propositions for a given ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of proposition objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposition"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition/stake/{stakeId}": {
            "get": {
                "summary": "This endpoint returns all propositions for a given stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "stakeId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of proposition objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposition"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition/ward/{wardId}/calling/{callingId}": {
            "get": {
                "summary": "This endpoint returns the propositions of a given ward for a given calling.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "callingId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of proposition objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposition"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/proposition/ward/{wardId}/organization/{organizationId}": {
            "get": {
                "summary": "This endpoint returns the propositions of a given ward that belongs to a given organization.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "organizationId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of proposition objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Proposition"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/ward": {
            "get": {
                "summary": "This endpoint returns a list of all the wards in the database.",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns an array of ward objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Ward"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "This endpoint creates a ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "newWard",
                        "in": "body",
                        "description": "An object representing a new ward",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Ward"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns an object containing the result of the request and a string representing a MongoDB ObjectId.",
                        "schema": {
                            "$ref": "#/definitions/Ward"
                        }
                    },
                    "422": {
                        "description": "The provided ward object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/ward/{wardId}": {
            "get": {
                "summary": "This endpoint returns the details of a single ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a ward object.",
                        "schema": {
                            "$ref": "#/definitions/Ward"
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "This endpoint updates the content of a single ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "ward",
                        "in": "body",
                        "description": "An updated ward object",
                        "schema": {
                            "$ref": "#/definitions/Ward"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified ward has been edited."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "422": {
                        "description": "The provided ward object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "This endpoint deletes a single ward.",
                "description": "",
                "parameters": [
                    {
                        "name": "wardId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified ward has been deleted."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/stake": {
            "get": {
                "summary": "This endpoint returns a list of all the stakes in the database.",
                "description": "",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns an array of stake objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Stake"
                            },
                            "xml": {
                                "name": "main"
                            }
                        }
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "post": {
                "summary": "This endpoint creates a stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "newStake",
                        "in": "body",
                        "description": "An object representing a new stake",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Stake"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns an object containing the result of the request and a string representing a MongoDB ObjectId.",
                        "schema": {
                            "$ref": "#/definitions/Stake"
                        }
                    },
                    "422": {
                        "description": "The provided stake object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        },
        "/stake/{stakeId}": {
            "get": {
                "summary": "This endpoint returns the details of a single stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "stakeId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a stake object.",
                        "schema": {
                            "$ref": "#/definitions/Stake"
                        }
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "put": {
                "summary": "This endpoint updates the content of a single stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "stakeId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    },
                    {
                        "name": "stake",
                        "in": "body",
                        "description": "An updated stake object",
                        "schema": {
                            "$ref": "#/definitions/Stake"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The specified stake has been edited."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "422": {
                        "description": "The provided stake object does not pass validation."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            },
            "delete": {
                "summary": "This endpoint deletes a single stake.",
                "description": "",
                "parameters": [
                    {
                        "name": "stakeId",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "A MongoDB ObjectId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified stake has been deleted."
                    },
                    "400": {
                        "description": "An invalid MongoDB ObjectId was provided."
                    },
                    "500": {
                        "description": "An error occured."
                    }
                },
                "security": [
                    {
                        "oAuthSample": [
                            "https://www.googleapis.com/auth/userinfo.profile"
                        ]
                    }
                ]
            }
        }
    },
    "definitions": {
        "Proposition": {
            "type": "object",
            "properties": {
                "memberId": {
                    "type": "string",
                    "example": "649345be812b4a3f37335cf6"
                },
                "callingId": {
                    "type": "string",
                    "example": "649345be812b4a3f37335cf7"
                },
                "leaderApproval": {
                    "type": "boolean",
                    "example": true
                },
                "contactedOn": {
                    "type": "string",
                    "example": "2002-12-09"
                },
                "interviewDate": {
                    "type": "string",
                    "example": "2002-12-15"
                },
                "interviewed": {
                    "type": "boolean",
                    "example": true
                },
                "accepted": {
                    "type": "boolean",
                    "example": true
                },
                "sustainedOn": {
                    "type": "string",
                    "example": "2002-12-30"
                },
                "setApart": {
                    "type": "string",
                    "example": "2002-12-30"
                },
                "realeasedOn": {
                    "type": "string",
                    "example": "2003-05-09"
                }
            },
            "required": [
                "memberId",
                "callingId"
            ]
        },
        "Calling": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Bishop"
                },
                "organizationId": {
                    "type": "string",
                    "example": "6493923060042c532a58a084"
                }
            },
            "required": [
                "name",
                "organizationId"
            ]
        },
        "Ward": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Midvale 11th"
                },
                "stakeId": {
                    "type": "string",
                    "example": "64b763f9afc286d42818dcf7"
                }
            },
            "required": [
                "name",
                "stakeId"
            ]
        },
        "Member": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "ahashedpassword"
                },
                "admin": {
                    "type": "boolean",
                    "example": true
                },
                "ageGroup": {
                    "type": "string",
                    "example": "Adult"
                },
                "wardId": {
                    "type": "string",
                    "example": "6493925960042c532a58a087"
                },
                "organizations": {
                    "type": "array",
                    "example": [
                        "649345be812b4a3f37335cf6",
                        "649345be812b4a3f37335cf8",
                        "649345be812b4a3f37335cf9",
                        "649345be812b4a3f37335cfb"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "firstName",
                "lastName"
            ]
        },
        "Stake": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Paris East"
                }
            },
            "required": [
                "name"
            ]
        }
    }
}
